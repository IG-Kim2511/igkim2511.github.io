{"version":3,"sources":["data4.js","Detail20.js","data21.js","Detail21_file.js","Detail21_2file.js","Detail22_file.js","Detail23_file.js","Detail24_file.js","Detail25_file.js","Detail27_file.js","Detail28_file.js","App.js","data2.js","data3.js","serviceWorker.js","index.js"],"names":["id","title","content","price","Detail20_file","history","useHistory","className","src","width","onClick","goBack","push","Detail21_file","props","useParams","shoes","Detail21_2file","찾은상품","find","상품","Detail22_file","박스","styled","div","제목","h4","색상","Detail23_file","React","Component","Detail24_file","useEffect","console","log","setTimeout","Detail25_file","useState","alert","alert변경","inputData","inputData변경","타이머","clearTimeout","onChange","e","target","value","Detail27_file","Axios","get","then","result","catch","Info","재고state","Detail28_file","재고state변경","App15","type","class","App16","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","NavDropdown","Item","Divider","Jumbotron","Button","variant","App17","data4naming","App18","Card","Card2","map","a","i","App19","path","pate","component","Card3","exact","App20","to","as","Detail20","App21","Data21","App22","App23","App24","App25","App26","axios","data","fetch","App27","shoes변경","App28","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.44676dcd.chunk.js","sourcesContent":["// (4-1)\r\nexport default\r\n\r\n[\r\n    {\r\n      id : 0,\r\n      title : \"White and Black\",\r\n      content : \"Born in France0\",\r\n      price : 120000\r\n    },\r\n  \r\n    {\r\n      id : 1,\r\n      title : \"Red Knit\",\r\n      content : \"Born in Seoul1\",\r\n      price : 110000\r\n    },\r\n  \r\n    {\r\n      id : 2,\r\n      title : \"Grey Yordan\",\r\n      content : \"Born in the States2\",\r\n      price : 130000\r\n    }\r\n  ] ","\r\n// 20-(2)\r\n// 1. src 폴더 내에 Detail20.js 파일을 만들고\r\n// 2. 컴포넌트 생성하는 코드를 담았습니다. \r\n// 근데 이거 쓰시려면 맨 위에 항상 import React를 해오셔야합니다.\r\n// 3. 맨 마지막줄에 Detail20 이라는 함수를 export 해주었습니다.\r\n\r\n\r\n// 20-(4) 페이지 이동 함수를 사용하시면 됩니다.\r\n// 예시를 위해 Detail 페이지(컴포넌트)에 뒤로가기 버튼을 하나 만들어봅시다.\r\n// onClick={()=>{  }\r\n \r\n// (5)\r\n// 그런거 만들고 싶으시면 useHistory() 라는 함수를 하나 import 해오시면 됩니다.\r\n\r\n// 1. import 를 해오시고 \r\n// import { useHistory } from 'react-router-dom';\r\n\r\n//  2. let history 라는 변수에 그 함수를 저장하시면 됩니다.\r\n// useHistory()는 여러분의 코딩생활을 편하게 해주는 일종의 Hook입니다. (useState 이런거랑 비슷한겁니다)\r\n// 그럼 이제 history 라는 변수엔 큰 object {} 자료가 하나 저장이 되어있습니다.\r\n// 그 object 안에는 페이지 이동 내역 + 유용한 함수가 저장되어있습니다.\r\n\r\n\r\n// (6) history.goBack()\r\n// history에 저장된 여러 자료들 중 가장 유용한건 goBack()이라는 함수입니다.\r\n// 이 함수를 실행하면 페이지가 뒤로갑니다.\r\n// 그래서 뒤로가기 버튼을 눌렀을 때 goBack() 함수를 실행하도록 코드를 짜본겁니다.\r\n// 그럼 이제 뒤로 잘 가죠?\r\n\r\n// Q. 이런걸 어케알고 코드를 짜는거죠?\r\n// A. 이런 라이브러리 사용법은 찾아서 읽거나 검색해봐야 알 수 있습니다. 저도 찾아본거임\r\n// go back(); : 외울 수 없음\r\n// -> 구글검색 react router library\r\n\r\n// (7) push(\"/~~~\")  : 특정경로로 이동시킴\r\n\r\n\r\n// // 20-(2)\r\nimport React, {useState} from 'react';\r\n\r\n// 20-(5)\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction Detail20_file(){\r\n    // 20-(5)\r\n    let history = useHistory();\r\n\r\n    return(  \r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n            <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\r\n            </div>\r\n            <div className=\"col-md-6 mt-4\">\r\n            <h4 className=\"pt-5\">file상품명</h4>\r\n            <p>상품설명</p>\r\n            <p>120000원</p>\r\n            <button className=\"btn btn-danger\">주문하기</button> \r\n\r\n            //  20-(4)  (6)\r\n            <button className=\"btn btn-danger\" onClick={()=>{history.goBack()}}>뒤로가기</button> \r\n            \r\n            //   (7)\r\n            <button className=\"btn btn-danger\" onClick={()=>{history.push(\"/home\")}}>뒤로가기</button> \r\n            </div>\r\n        </div>\r\n    </div> \r\n  \r\n    )\r\n  }\r\n\r\nexport default Detail20_file;","export default\r\n[\r\n    {\r\n      id : 0,\r\n      title : \"White and Black\",\r\n      content : \"Born in France\",\r\n      price : 120000\r\n    },\r\n  \r\n    {\r\n      id : 1,\r\n      title : \"Red Knit\",\r\n      content : \"Born in Seoul\",\r\n      price : 110000\r\n    },\r\n  \r\n    {\r\n      id : 2,\r\n      title : \"Grey Yordan\",\r\n      content : \"Born in the States\",\r\n      price : 130000\r\n    }\r\n  ] \r\n","\r\n// (4) 그래서 :id 자리에 입력한 숫자를 저기에 집어넣고 싶습니다. props.shoes[:id자리에 있는 숫자]\r\n// 그런게 되냐고요? 라우터 라이브러리 사용법을 찾아보면 나올 것 같습니다.\r\n// 찾아보면 useParams() 라는 훅을 사용하면 된다고하네요. \r\n\r\n// (5)useParams\r\n// 1. 맨 위에서 import를 이용해 useParams를 가져왔고\r\n// 2. 그걸 변수에 저장했습니다. \r\n// useParams() 라는 함수는 현재 URL에 적힌 모든 파라미터를 {파라미터1,파라미터2} 이런 식으로 저장해주는 고마운 함수입니다.\r\n// 그걸 destructuring 문법을 이용해서 따로따로 변수로 빼서 저장한 것이고요.\r\n// 그래서 id라는 변수는 :id 자리에 있던 숫자를 의미합니다.\r\n\r\n// 그러니까 /detail/1로 접속하면 id라는 변수는 1이 되고\r\n// /detail/100 으로 접속하면 id라는 변수는 이제 100이 되는 겁니다.\r\n\r\n// (5-2) {props.shoes[id]}\r\n// ????? : 왜인지 모르지만 에러가 나서 일단 여기로 옮겨놓음\r\n\r\n// <h4 className=\"pt-5\">file상품명.{props.shoes[id].title}</h4>\r\n// <p>상품설명.{props.shoes[id].content}</p>\r\n// <p>120000원.{props.shoes[id].price}</p>\r\n\r\n\r\n// (6) '가격순 정렬'같은 기능을 사용해서 순서가 바뀌었을때, array의 순서대로 보여주는 방식때문에 제대로 구현이 안될수 있음\r\n// /:id 자리에 입력한 값과 영구번호가 같은 {상품데이터}를 찾아서, 데이터바인딩해줘야 함. \r\n//  ---> Detail21_2file\r\n\r\n\r\n\r\nimport React, {useState} from 'react';\r\n\r\n// (5)\r\nimport { useHistory ,useParams } from 'react-router-dom';\r\n\r\n// (1-4)\r\nfunction Detail21_file(props){\r\n\r\n    let history = useHistory();\r\n\r\n    // (5)\r\n    let { id } = useParams();\r\n    \r\n\r\n    return(  \r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n            <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\r\n            </div>\r\n            <div className=\"col-md-6 mt-4\">\r\n            // (1-4)  \r\n            <h4 className=\"pt-5\">file상품명.{props.shoes[0].title}</h4>\r\n            <p>상품설명.{props.shoes[1].content}</p>\r\n            <p>120000원.{props.shoes[2].price}</p>\r\n            <button className=\"btn btn-danger\">주문하기</button>         \r\n            <button className=\"btn btn-danger\" onClick={()=>{history.goBack()}}>뒤로가기</button>        \r\n            <button className=\"btn btn-danger\" onClick={()=>{history.push(\"/home\")}}>뒤로가기</button> \r\n            \r\n            // (5-2)\r\n         \r\n\r\n           \r\n\r\n\r\n            </div>\r\n        </div>\r\n    </div> \r\n  \r\n    )\r\n  }\r\n\r\nexport default Detail21_file;","// App21-(6) \r\n// '가격순 정렬'같은 기능을 사용해서 순서가 바뀌었을때, array의 순서대로 보여주는 방식때문에 제대로 구현이 안될수 있음\r\n// /:id 자리에 입력한 값과 영구번호가 같은 {상품데이터}를 찾아서, 데이터바인딩해줘야 함. \r\n//  ---> Detail21_2file\r\n\r\n// (6-2)\r\n// find() 라는 ES6 신문법이 있습니다. Array 안에서 원하는 자료를 찾고싶을 때 사용합니다.\r\n\r\n// filter() 함수, 그냥 반복문 이런거 쓰셔도 전혀상관없습니다.\r\n// 1. find()는 array 뒤에 붙일 수 있으며, 안에 콜백함수가 들어갑니다.\r\n// 2. 콜백함수 내의 파라미터는 (제가 상품이라고 적은거) array 안에 있던 하나하나의 데이터를 의미합니다.\r\n\r\n// 3. return 오른쪽엔 조건식을 적을 수 있습니다. 이게 참인 데이터만 새로운 변수에 저장해줍니다.\r\n// 4. 조건식엔 그리고 그걸 현재 URL의 /:id에 적힌 값과 상품의 영구번호 (상품.id)가 같은지 비교하고 있는 겁니다.\r\n \r\n\r\n// 그래서 /detail/0으로 접속시 찾은상품이라는 변수를 출력해보시면 아마 영구번호가 id : 0인 데이터가 나올겁니다.\r\n// /detail/1로 접속시 찾은상품이라는 변수는 영구번호가 id : 1인 데이터일겁니다.\r\n// 그래서 찾은상품이라는 변수를 이용해서 상품명, 가격 HTML 부분에 데이터바인딩을 했을 뿐입니다.\r\n// 성공!\r\n\r\n// 지금은 프론트엔드에서 모든 데이터를 다루고 있어서 어려운 + 반복문스러운 find() 함수를 사용한 것이지만\r\n// 실제 개발할 땐 그냥 서버에 id : 0인 상품데이터를 Ajax로 요청하는 경우가 많을겁니다.\r\n// 그럼 저렇게 find() 어쩌구를 쓰는게 아니라 ajax 요청하는 코드가 들어가있겠고\r\n// ajax 요청을 성공하면 {} 중괄호 안에 깔끔하게 상품데이터가 하나만 딱 들어올 것 같군요.\r\n\r\n\r\nimport React from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\n\r\nfunction Detail21_2file(props){\r\n\r\n  let { id } = useParams();\r\n  // (6-2)\r\n  let 찾은상품 = props.shoes.find(function(상품){      \r\n    return 상품.id == id\r\n  });\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\r\n        </div>\r\n        <div className=\"col-md-6 mt-4\">\r\n          <h4 className=\"pt-5\">{찾은상품.title}</h4>\r\n          <p>{찾은상품.content}</p>\r\n          <p>{찾은상품.price}원</p>\r\n          <button className=\"btn btn-danger\">주문하기</button> \r\n        </div>\r\n      </div>\r\n  </div>  \r\n  )\r\n};\r\n\r\nexport default Detail21_2file","// styled-components ( 'CSS in JS')\r\n\r\n// 컴포넌트가 많은 경우 CSS를 하다보면 불편함이 생기는데\r\n// 1. class 만들어놓은걸 까먹고 중복해서 또 만들거나\r\n// 2. 갑자기 다른 이상한 컴포넌트에 원하지않는 스타일이 적용되거나\r\n// 3. CSS 파일이 너무 길어져서 수정이 어렵거나\r\n// 이런 경우가 있습니다.\r\n \r\n// 그래서 class선언없이 Component에 CSS를 직접 넣음. 'CSS in JS'라고도 함.\r\n\r\n// styled-components라는 인기 라이브러리를 설치하여 이용하시면 됩니다.\r\n\r\n\r\n//(2)🌈 일단 설치부터 해봅시다 터미널을 여시고\r\n// yarn add styled-components 혹은\r\n// npm install styled-components\r\n\r\n\r\n//(3)🌈\r\n// 그리고 사용하고 싶은 컴포넌트 맨위에 무언가를 import 해오셔야합니다.\r\n// import styled from 'styled-components'\r\n\r\n// (4)🌈\r\n// '박스'Component with CSS가 만들어짐\r\n\r\n// 이 라이브러리를 이용하시면 컴포넌트를 만들 때 스타일을 미리 주입해서 만들 수 있습니다.\r\n// 제가 한번 예시로 padding : 20px인 div박스를 styled-components를 이용해 만들어보겠습니다.\r\n\r\n// 1. div박스를 하나 만들고 싶으면 저렇게 styled.div 라는걸 사용하시면 됩니다. p태그 만들려면 styled.p 이런 식입니다.\r\n// 2. 그리고 그 오른쪽에 “ backtick 기호를 이용해서 기본 스타일을 다 넣어주시면 됩니다.\r\n// 3. 그리고 그걸 변수로 저장하면 컴포넌트가 완성됩니다. 원하는 곳에 사용하시면 됩니다.\r\n\r\n// 그럼 최종적으로 padding : 20px인 div박스를 저렇게 만들 수 있습니다.\r\n// class 이런거 선언 필요없이 <컴포넌트>를 하나 만들었죠?\r\n\r\n// (4-2)🌈  let 제목\r\n\r\n// (5)🌈 props로 스타일링하기 \r\n\r\n// 여러가지 사용법 중 가장 유용한건 바로 props로 스타일링하는 방법입니다.\r\n// 예를 들면 위에서 만든 제목 (h4) 요소가 여러가지 색깔 버전으로 필요할 때 어떻게?\r\n\r\n// 색상기입란에 ${ props => props.색상 } 이라는 코드를 적었습니다.\r\n// – ${} 이라는 문법은 문자를 생성하는 “ 백틱 기호안에서 쓸 수 있는 ES6 문법인데, 문자 중간중간 함수나 변수를 넣음\r\n// – 그리고 props.색상이라는 props 변수를 여기에 집어넣은 겁니다. \r\n\r\n// (5-2)🌈\r\n// 그냥 ${ props.색상 } 이렇게 넣으면 안되고 저렇게 콜백함수로 넣으셔야합니다.\r\n\r\n// (5-3)🌈\r\n// 자바스크립트에서 variable 미리 지정하는 것처럼, \r\n// color : ${색상}; 으로 일단 변수화 한 후 , \r\n// <제목 색상=\"blue\">  나중에 지정.....으로 이해\r\n\r\n// props 로 미리 빵꾸를 뚫어놓으신 부분에 원하는 문자를 전송해줄 수 있습니다.\r\n// 예제에선 props.색상이라는 props에, red라는 문자가 들어가서 컴포넌트가 생성됩니다.\r\n\r\n\r\n// (6)🌈\r\n// 리액트에서 props 전송하실 땐 두가지 방법이 있습니다. \r\n// 그냥 일반 텍스트를 전달하고 싶으면 “” 따옴표 안에 쓰시면 되고\r\n// 변수나 자료형을 담고 싶으면 {} 중괄호 안에 쓰시면 됩니다.\r\n\r\n// (7)🌈\r\n// 저처럼 옛날 개발자들은 CSS가 편합니다.\r\n\r\nimport React, {useState} from 'react';\r\nimport { useHistory ,useParams } from 'react-router-dom';\r\n\r\n// (3)🌈\r\nimport styled from 'styled-components'\r\n\r\nfunction Detail22_file(props){\r\n\r\n    let history = useHistory();\r\n\r\n    let { id } = useParams();\r\n    \r\n    // (4)🌈\r\n    let 박스 = styled.div`\r\n    padding : 20px;\r\n    background-color: yellow;`;\r\n\r\n    // (4-2)🌈 (5) (5-2) (6)\r\n    let 제목 = styled.h4`\r\n    font-size : 50px; \r\n    color : ${ props =>props.색상}\r\n    `;\r\n\r\n\r\n\r\n\r\n    return(  \r\n      <div className=\"container\">\r\n\r\n      // (4)🌈 (4-2) (5)\r\n      <박스><제목 색상={'red'}>  상세페이지 </제목>styled-components  </박스>\r\n      <박스><제목 색상=\"blue\">  상세페이지 </제목>styled-components  </박스>\r\n      <박스><제목 색상={'green'}>  상세페이지 </제목>styled-components  </박스>\r\n\r\n       \r\n    </div> \r\n  \r\n    )\r\n  }\r\n\r\nexport default Detail22_file;","// 🌈\r\n\r\n// 23-(1) SASS문법으로 작성하고 싶으시면 그냥 파일명만 .css →.scss로 바꿔주시면 끝입니다.→ Detail.scss 파일\r\n// 23-(2) import './Detail23.Scss'\r\n\r\n// 23-(3)  → Detail23.scss\r\n\r\n// 23-(6)\r\n\r\nimport React, {useState} from 'react';\r\nimport { useHistory ,useParams } from 'react-router-dom';\r\nimport styled from 'styled-components'\r\n\r\n// 23-(2)\r\nimport './Detail23.css';\r\nimport './Detail23.scss';\r\n\r\n\r\nfunction Detail23_file(props){\r\n\r\n    return(  \r\n      <div className=\"container\">\r\n\r\n    //   23-(1-2) css 적용\r\n      <div className=\"red_css\">\r\n            <p>    Detail23.css  </p>      \r\n      </div>\r\n\r\n      // 23-(3)\r\n        <div className=\"red\">\r\n        <h4> h4 </h4>\r\n            <p>    Detail23.scss  </p>      \r\n        </div>\r\n\r\n        // 23-(6)\r\n        <div className=\"my-alert\">\r\n            <p>  my-alert </p>      \r\n        </div>\r\n        <div className=\"my-alert2\">\r\n            <p>  my-alert2 </p>      \r\n        </div>\r\n        <div className=\"my-alert3\">\r\n            <p>  my-alert3 </p>      \r\n        </div>\r\n              \r\n    </div> \r\n  \r\n    )\r\n  }\r\n\r\nexport default Detail23_file;","// 🌈24\r\n// 컴포넌트의 Lifecycle \r\n// 1. 생성 2. 삭제  3. 관련된 state가 변경되면 재렌더링(업데이트)\r\n\r\n// 컴포넌트의  Hook ( Lifecycle Hook ) \r\n// 컴포넌트의 인생 중간중간 Hook을 걸 수 있습니다\r\n\r\n// “Detail 컴포넌트 등장 전에 ~~함수실행”\r\n// “Detail 컴포넌트 사라지기 전에 ~~함수실행”\r\n// “Detail 컴포넌트 업데이트 되고나서 ~~함수실행”\r\n\r\n// Hook을 사용하면 이런 코드를 짤 수 있다는 것이지요.\r\n// Hook의 정확한 명칭은 Lifecycle Hook 이라고 합니다.\r\n\r\n// (2)class로 만든 컴포넌트 Hook  : 예전 오리지널 문법 \r\n\r\n// class 컴포넌트 작성하는 곳 안에 그냥 대충 작성하시면 됩니다.\r\n// 가장 유용한 Hook 두개는\r\n// 1. componentDidMount() {} \r\n// 2. componentWillUnmount() {} \r\n\r\n// (3) useEffect hook :  요즘 리액트개발에 많이 사용 (약간 더 짧고 쉬우니까요)\r\n\r\n// 사용법: 그냥 function 컴포넌트 안에 넣어주시면 됩니다. (return 나오기 전에요)\r\n\r\n// 1. 근데 미리 페이지 상단에서 useEffect를 import 해오신 후\r\n// 2. useEffect() 를 사용하셔야합니다.\r\n// 3. 그리고 안에 콜백함수를 집어넣습니다.\r\n// 4. 콜백함수 안에는 Detail 컴포넌트가 첫 등장하고나서 실행하고싶은 코드가 있으면 적어주면 됩니다\r\n\r\n// 조금 더 자세하게 알아보는… useEffect() 내의 코드의 실행조건은\r\n\r\n// – 컴포넌트가 첫 등장해서 로딩이 끝난 후에 (전문용어로 mount 끝났을 때)\r\n// – 컴포넌트가 재렌더링 되고난 후 때 (전문용어로 update 되고난 후에)\r\n\r\n// 이제 Detail 컴포넌트 로드시나 업데이트시 뭔가 코드실행하고 싶은게 있으면 여기다 다 적으면 되겠죠?\r\n\r\n// 5.console.log(1111); . Detail24_file부르면 출력됨\r\n\r\n// (4) useEffect hook  : 컴포넌트가 사라질 때 (unmount 될때 )실행되는....\r\n// useEffect() 안에는 return 추가\r\n// 여기서의 return: JS의 return....  결과값 도출 시킴\r\n// 그리고 여기 넣은 함수는 컴포넌트가 사라질 때 (unmount 될때 )실행됩니다.\r\n\r\n// – 당연히 다른 곳에서 만들어 놓은 함수명을 입력하셔도 됩니다.\r\n// – arrow function 집어넣으셔도 가능합니다.\r\n\r\n// (5)\r\n// useEffect Hook는 여러개 사용하셔도 됩니다.그냥 차례로 쭉 적으면 되는데 적은 순서대로 순차적으로 실행이 됩니다.\r\n\r\n// (3-1)\r\nimport React, {useEffect, useState} from 'react';\r\nimport { useHistory ,useParams } from 'react-router-dom';\r\nimport styled from 'styled-components'\r\n\r\n// (2)\r\nclass Detail2 extends React.Component {\r\n    componentDidMount(){\r\n      //Detail2 컴포넌트가 Mount 되고나서 실행할 코드 , Ajax도 이런곳에서 자주 사용\r\n    }\r\n    componentWillUnmount(){\r\n      //Detail2 컴포넌트가 Unmount 되기전에 실행할 코드 (다른페이지로 넘어간다든지 등의 사유로)\r\n    }\r\n  }\r\n\r\nfunction Detail24_file(props){\r\n\r\n    // (3-2, 3-3, 3-4, 3-5)\r\n        useEffect(()=>{ \r\n                console.log( 'detail24');        \r\n                    });\r\n    // (4) (5)\r\n    useEffect(()=>{\r\n        return function 어쩌구(){}\r\n     });\r\n    \r\n    // 숙제: 첫화면에서 2초 동안 보이는 코드 → 25강\r\n    useEffect(()=>{ \r\n            let 타이머 = setTimeout(() => {                \r\n            }, 2000);\r\n\r\n    });\r\n    return(  \r\n           <div className=\"container\">      \r\n        <div className=\"my-alert\">\r\n            <p>  my-alert </p>      \r\n        </div>\r\n  \r\n              \r\n    </div> \r\n  \r\n    )\r\n  }\r\n\r\nexport default Detail24_file;","\r\n//(1) 저번시간 숙제 : Detail 페이지 방문 후 2초 후에 alert 박스가 사라지게 해보십시오. \r\n\r\n// 1. UI 보이고 안보이고의 상태를 state로 저장해둠 (true/false 이런걸로)\r\n// 2. state가 true일 때만 UI를 보여준다고 if문을 짜둠 \r\n//  state를 만들고 state에 의해서 UI를 보여주도록 if문을 완성했습니다.\r\n\r\n// (2)\r\n//  Detail 컴포넌트 로드 후 2초 후에 alert라는 state를 false로 만들어주면 되는 것이군요.\r\n// useEffect 안에 2초 타이머를 추가했고 2초 후에 alert 라는 state를 false로 변경\r\n\r\n// (2-2)\r\n// B: Detail 컴포넌트가 mount뿐만이 아니라, 업데이트(재랜더링)될 때도 저 useEffect 계속 실행됨\r\n// 컴포넌트 업데이트시 진짜 실행되는지 실험해보도록 합시다.\r\n// (실험을 위한... 코딩 추가)\r\n// <input> 태그\r\n//  inputData라는 state\r\n//  { inputData }데이터바인딩\r\n\r\n// (2-3)\r\n// <input>에다가 뭔가 입력하면 계속 Detail 컴포넌트가 재렌더링됩니다. (업데이트됨)\r\n// 그럼 <input>에다가 뭔가 입력할 때마다 useEffect() 이것도 실행되겠죠?\r\n// 근데 useEffect()도 실행되면 안될 것 같죠? 맞습니다. 이건 자원낭비입니다.\r\n\r\n// (3) \r\n// useEffect() 함수 끝부분에 대괄호[]  여기에는 state를 넣을 수 있습니다.\r\n\r\n// 1. Detail컴포넌트 로드가 될 때 & \r\n// 2. alert라는 state가 변경이 될 때만 실행됩니다.\r\n\r\n// 첫 mount때만 실행 후 , 업데이트때는 실행 안함 , 오직 [ ] 안의 state가 변경된때만 실행\r\n\r\n\r\n// (3-2) state가 위에서 먼저 선언되어야 함\r\n\r\n// (3-3) 대괄호 안에 state는 콤마로 여러개 넣을 수 있습니다\r\n\r\n//(3-4)  [ ]안에 빈칸\r\n// 그럼 이제 이 useEffect() 코드는 컴포넌트가 업데이트 될 때 절대 실행되지 않습니다.\r\n// 그냥 컴포넌트 mount때 한번 딱 실행하고 싶은 코드를 담을 때 쓸 수 있는 일종의 트릭쇼입니다.\r\n\r\n\r\n// (4) setTimeout 주의점\r\n// setTimeout 타이머를 쓰셨으면 타이머해제도 해야합니다. \r\n\r\n// 방금 Detail 방문시 2초 후에 UI 사라지게 해주세요~ 라고 코드를 짰습니다.\r\n// 근데 2초가 되기도 전에 Detail을 벗어나면 어떻게 될까요?\r\n// 지금은 별 문제없는 것 같지만 코드가 길어지거나 꼬이면,\r\n// 남아있는 타이머 때문에 이상한 현상이 일어날 수 있습니다.\r\n// 그래서 컴포넌트가 사라질 때 타이머를 없애는 코드도 추가해주는게 좋습니다.\r\n\r\n// (4-2)\r\n// useEffect안에는 return + 함수를 추가하면,  컴포넌트가 사라질 때 특정 코드를 실행할 수 있다고 했습니다.\r\n\r\n// 거기에 clearTimeout을 추가한겁니다.\r\n// clearTimeout(타이머이름)\r\n// 이렇게 쓰시면 타이머를 바로 해제할 수 있습니다.\r\n\r\n\r\n\r\nimport React, {useEffect, useState} from 'react';\r\nimport { useHistory ,useParams } from 'react-router-dom';\r\nimport styled from 'styled-components'\r\n\r\n\r\nfunction Detail25_file(props){\r\n\r\n    // (1) (3-2)\r\n    let [ alert, alert변경 ] = useState(true);\r\n   // (2-2)\r\n  let [inputData,inputData변경]=useState('');\r\n\r\n\r\n    // (1)\r\n    useEffect(()=>{ \r\n    // (2)\r\n            let 타이머 = setTimeout(() => {alert변경(false)}, 2000);  \r\n     // (2-3)\r\n        console.log('업데이트(재랜더링)될 때도 저 useEffect 계속 실행됨');} );\r\n        \r\n     // (3)\r\n        useEffect(()=>{  \r\n                let 타이머 = setTimeout(() => {alert변경(false)}, 2000);     \r\n            console.log('업데이트(재랜더링)될 때도 저 useEffect 계속 실행됨');} \r\n            // (3-3)\r\n            ,[alert,inputData]);\r\n            \r\n            // \r\n     useEffect(()=>{  \r\n            let 타이머 = setTimeout(() => {alert변경(false)}, 2000);     \r\n     console.log('업데이트(재랜더링)될 때도 저 useEffect 계속 실행됨');} \r\n      // (3-4)\r\n        ,[ ]);\r\n        \r\n     // \r\n        useEffect(()=>{  \r\n               let 타이머 = setTimeout(() => {alert변경(false)}, 2000);     \r\n        console.log('업데이트(재랜더링)될 때도 저 useEffect 계속 실행됨');\r\n        // (4-2)\r\n        return ()=>{ clearTimeout(타이머)}   }  ,[ ]);\r\n    \r\n\r\n    return(  \r\n           <div className=\"container\">      \r\n        <div className=\"my-alert\">\r\n            <p>  my-alert </p>      \r\n        </div>\r\n    //(1)\r\n        {\r\n            alert === true\r\n            ? (<div className=\"my-alert2\">\r\n                <p>페이지 방문 후 2초 후에 alert 박스가 사라지게 해보십시오</p>\r\n              </div>)\r\n            : null\r\n          }\r\n              \r\n     //(2-2)\r\n    <input onChange={(e)=>{inputData변경(e.target.value)}} />\r\n\r\n    {inputData}\r\n    \r\n    </div> \r\n  \r\n    )\r\n  }\r\n\r\nexport default Detail25_file;","\r\n// (27-6)\r\n// 페이지 방문하자마자 Ajax요청을 실행하고 싶을때 \r\n// (Ajax를 이용해서 페이지 내용을 받아오거나 그럴 때가 있습니다.)\r\n// useEffect() 함수안에 넣으면 됨( 컴포넌트 등장시/업데이트시 실행되는 함수)\r\n// 그 컴포넌트가 등장시/업데이트시 ajax 요청을 실행하겠군요.\r\n\r\n// 하지만 업데이트시 매번 ajax 요청을 하기 싫을 때도 있겠죠?\r\n// 그럼 위처럼 useEffect() 안에 대괄호를 추가해주시면 되겠군요.\r\n// 그럼 등장시에만 한번 실행되고 끝납니다.\r\n\r\nimport Axios from 'axios';\r\nimport React, {useEffect, useState} from 'react';\r\nimport { useHistory ,useParams } from 'react-router-dom';\r\nimport styled from 'styled-components'\r\n\r\n\r\nfunction Detail27_file(props){\r\n\r\n    let [ alert, alert변경 ] = useState(true);\r\n\r\n     let [inputData,inputData변경]=useState('');\r\n\r\n        useEffect(()=>{  \r\n\r\n        // (27-6)\r\n        Axios.get()\r\n        .then( (result)=>{}  )\r\n         .catch( ()=>{}  )\r\n\r\n        let 타이머 = setTimeout(() => {alert변경(false)}, 2000);     \r\n        console.log('업데이트(재랜더링)될 때도 저 useEffect 계속 실행됨');\r\n        return ()=>{ clearTimeout(타이머)}   }  ,[ ]);\r\n    \r\n\r\n    return(  \r\n           <div className=\"container\">      \r\n        <div className=\"my-alert\">\r\n            <p>  my-alert </p>      \r\n        </div>  \r\n\r\n        {\r\n            alert === true\r\n            ? (<div className=\"my-alert2\">\r\n                <p>페이지 방문 후 2초 후에 alert 박스가 사라지게 해보십시오</p>\r\n              </div>)\r\n            : null\r\n          }\r\n          \r\n    <input onChange={(e)=>{inputData변경(e.target.value)}} />\r\n\r\n    {inputData}\r\n    \r\n    </div> \r\n  \r\n    )\r\n  }\r\n\r\nexport default Detail27_file;","\r\n\r\n// 28강 (1-3)\r\n// 이 state 데이터를 <Detail> 컴포넌트 내의 <Info> 컴포넌트에 보여주고싶습니다.\r\n// 연습을 위해 <Info> 컴포넌트를 <Detail> 컴포넌트 안에 우선 하나 만들어보십시오.\r\n\r\n// (1-4)\r\n// 그럼 <App> -> <Detail> -> <Info> 이렇게 데이터를 전송해야합니다.\r\n// 그냥 props 문법을 2번 써주시면 됩니다\r\n\r\n\r\n// (2)\r\n// Q. 주문하기 버튼을 클릭하면, 재고 state에서 1을 빼려면? (ex: 10 → 9)\r\n// 상위 요소가 가지고 있는 재고라는 state의 0번째 데이터에서 1을 빼고 싶은겁니다.\r\n\r\n// 그럼 이 버튼을 눌렀을 때 재고[0] 데이터에서 1을 빼고 싶은데 어떻게하면 될까요?\r\n// state를 다룰 땐 당연히 state 변경함수를 써야한댔죠?\r\n\r\n// (2-2)\r\n// 근데 state 변경함수도 상위 컴포넌트에 있기 때문에 이것도 props로 전송해서 쓰시면 됩니다.\r\n\r\n// 버튼 클릭때 재고변경함수 동작함 [10,11,12]  👉 [9,11,12]\r\n\r\n\r\n\r\nimport Axios from 'axios';\r\nimport React, {useEffect, useState} from 'react';\r\nimport { useHistory ,useParams } from 'react-router-dom';\r\nimport styled from 'styled-components'\r\n\r\n// (1-3)\r\nfunction Detail28_file(props){   \r\n\r\n    return(  \r\n    <div className=\"container\">    \r\n    // (1-4)  \r\n      <Info 재고state={props.재고state}/>\r\n\r\n      // (2) (2-2)\r\n      <button className='btn btn-danger' onClick={ () => { props.재고state변경([9,11,12]) }  }> 주문하기 </button>\r\n\r\n    </div>   \r\n    )\r\n  }\r\n\r\n// (1-3)\r\nfunction Info(props){\r\n  return(\r\n    <div>  \r\n    // (1-4)\r\n     <p> 재고 :  {props.재고state[0]}</p>     \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Detail28_file;","// 18-(1)\r\n/*eslint-disable*/\r\n\r\nimport React,{useState} from 'react';\r\nimport './App.css';\r\n\r\nimport Data from './data.js'\r\n\r\n// 16-(1)\r\nimport { Navbar , Nav ,NavDropdown , Form , FormControl, Button, Jumbotron} from 'react-bootstrap';\r\n\r\n// 17 - (2) (2-2)\r\nimport data2mynaming from './data2.js'\r\n\r\n// 17 - (3)\r\nimport {naming,naming2} from './data3.js'\r\n\r\n// 17-(4-1)\r\nimport data4naming from './data4.js'\r\n\r\n// 19-(3) 20-(3-3) 20-(8-2)\r\nimport { Link, Route, Switch } from 'react-router-dom'\r\n\r\n// 20-(2)\r\nimport Detail20_file from './Detail20.js'\r\n\r\n// 21 - (1)\r\nimport Data21 from './data21.js'\r\nimport Detail21_file from './Detail21_file.js'\r\nimport Detail21_2file from './Detail21_2file.js'\r\n\r\n// 22\r\nimport Detail22_file from './Detail22_file.js'\r\n// 23\r\nimport Detail23_file from './Detail23_file.js'\r\n// 24\r\nimport Detail24_file from './Detail24_file.js'\r\n// 25\r\nimport Detail25_file from './Detail25_file.js'\r\n\r\n// 26-(2)\r\nimport axios from 'axios';\r\n\r\n// 27\r\nimport Detail27_file from './Detail27_file.js'\r\n// 28\r\nimport Detail28_file from './Detail28_file.js'\r\n\r\n\r\n\r\n//👉🌈⚡🦄 ⭐😀👻👽🍉🍒🔥\r\n\r\n// 15 쇼핑몰 프로젝트 : 프로젝트 생성 & Bootstrap 설치\r\n//(1)yarn\r\n// yarn이 뭐하는 애냐면 npm이나 npx를 대체해서 이용할 수 있게 도와주는 친구입니다.\r\n// npm보다 훨씬 빠른 라이브러리 설치속도와 안정성을 자랑합니다. \r\n// 일단 설치해놓으면 npx create-react-app 어쩌구 하실 때 자동으로 yarn이 구동되어 빨라집니다. \r\n// 누군가가 npm install 어쩌구 하라고 하면 그거 대신 yarn add 어쩌구 라고 사용하시면 더 빠르게 설치할 수 있으며\r\n// npm run start 로 미리보기 띄울 때도 yarn start 이걸로 대체할 수 있습니다. \r\n\r\n// (2)\r\n// react bootstrap이라고 구글 검색하면 맨 처음에 나오는 사이트로 들어갑시다. \r\n// 터미널 : npm install react-bootstrap bootstrap\r\n\r\n// (3)\r\n// 사이트에 있는 CSS 파일을 index.html 파일의 <head> 태그 안에 복붙해\r\n\r\n// (4) bootstrap Component 복붙\r\n\r\nfunction App15() {\r\n  return (\r\n   <div className=\"App\">\r\n    <div className=\"black-nav\"> 15 쇼핑몰 프로젝트 : 프로젝트 생성 & Bootstrap 설치 </div>\r\n    // (4)\r\n    <button type=\"button\" class=\"btn btn-primary\">Primary</button>\r\n\r\n   </div>\r\n  );\r\n}\r\n\r\n// 16 React Bootstrap. 평화로운 쇼핑몰 레이아웃 디자인\r\n// (1) React Bootstrap 홈페이지에서 Import Components 복사-붙여넣기\r\n// (1-2) 사용할 component이름 (Navbar , Nav ,NavDropdown , Form , FormControl, Button) 모두 목록에 추가\r\n// (1-3) 대문자 시작 태그들 모두가 Component\r\n\r\n// (2) css className 추가 가능\r\n\r\n// bootstrap 검색어 : jumbotron, layout\r\n\r\nfunction App16() {\r\n  return (\r\n   <div className=\"App\">\r\n    <div className=\"black-nav\">16 React Bootstrap. 평화로운 쇼핑몰 레이아웃 디자인  </div>\r\n\r\n    <div>\r\n    // (2)navbar\r\n    <Navbar bg=\"light\" expand=\"lg\" className='background'>\r\n        <Navbar.Brand href=\"#home\">..</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"#home\">Home</Nav.Link>\r\n            <Nav.Link href=\"#link\">Link</Nav.Link>\r\n            <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n            </NavDropdown>\r\n          </Nav>        \r\n      </Navbar.Collapse>\r\n\r\n   // Jumbotron\r\n     <Jumbotron>\r\n        <h1>Hello, world!</h1>\r\n        <p>\r\n          This is a simple hero unit, a simple jumbotron-style component for calling\r\n          extra attention to featured content or information.\r\n        </p>\r\n        <p>\r\n          <Button variant=\"primary\">Learn more</Button>\r\n        </p>\r\n      </Jumbotron>\r\n\r\n      // 상품 레이아웃\r\n      <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-4\">\r\n          <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\r\n          <h4>상품명</h4>\r\n          <p>상품정보</p>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <img src=\"https://codingapple1.github.io/shop/shoes2.jpg\" width=\"100%\" />\r\n          <h4>상품명</h4>\r\n          <p>상품정보</p>\r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <img src=\"https://codingapple1.github.io/shop/shoes3.jpg\" width=\"100%\" />\r\n          <h4>상품명</h4>\r\n          <p>상품정보</p>\r\n        </div>\r\n      </div>\r\n      </div>\r\n      </Navbar>\r\n    </div>\r\n   </div>\r\n  );\r\n}\r\n\r\n// 17 코드가 넘나 길어진다면 import / export 사용해보기\r\n\r\n// (1) data.js /  import / export 문법\r\n//src폴더에 data.js 파일 만듬\r\n// export default [ ] \r\n\r\n// (1-2) 코드 그냥 useState([]); 안에 넣기\r\n\r\n// (2)  data2.js / export default mynaming\r\n// var naming변수 만듬\r\n// name이라는 변수를 다른 파일에서 쓸수 있게 함(참고로 페이지의 가장 마지막 문단에 코딩함)\r\n//export default mynaming2 ...이런식으로 2번 쓸 수 없음\r\n\r\n// (2-2)\r\n// App.js에서 data2.js에서 배출한 변수를 쓰고 싶다면, 'import 변수명 from 경로' 사용\r\n// 경로 쓸때 ./라고 쓰는 것은 현재경로입니다.\r\n\r\n// (2-3) mynaming 데이터바인딩\r\n\r\n// (3) 변수 2개 export할때... array 형식 사용 , \r\n\r\n// (3-2) naming2 데이터바인딩\r\n\r\n\r\n//  (4) export default\r\n// (4-1) data4.js / import, export\r\n// (4-2) 호출\r\n\r\nfunction App17() {\r\n\r\n  // (1-2)  (4)\r\n  let [shoes,shoes변경]=useState(data4naming);\r\n\r\n  return (\r\n   <div className=\"App\">\r\n    <div className=\"black-nav\">  17 코드가 넘나 길어진다면 import / export 사용해보기  </div>\r\n\r\n    // (2-3)\r\n    {data2mynaming}\r\n\r\n    // (3-2)\r\n    {naming2}\r\n\r\n    <div>\r\n    // (4-2)\r\n      <h4> {shoes[0].title} </h4> \r\n      <h4> {shoes[1].content} </h4> \r\n      <h4> {shoes[2].price} </h4> \r\n      \r\n     </div>\r\n\r\n   </div>\r\n    );\r\n }\r\n\r\n// 🦄18 숙제 해설 : 상품목록 Component 만들기 + 반복문\r\n// (1)일단 터미널창에 뜨는 warning부터 해결합시다. 이런 잔소리가 귀찮다면, 페이지 맨 위에 /*eslint-disable*/ 이라는 코드를 추가합니다.\r\n\r\n// (2) 1번째 상품목록 Component 만들기 \r\n// (2-2) function mynaming (){ return( <div> component'만들 html넣음</div>)}\r\n\r\n// (2-3) 호출\r\n// (2-4) props\r\n\r\n// (3) 모든상품목록 Component 만들기\r\n\r\n// (3-2)\r\n// 각각의 Card 컴포넌트마다 다른 데이터 전송해주기 \r\n// 각각의 Card마다 shoes[0], shoes[1] … 이런 식으로 전송해주면 되겠구만요.\r\n\r\n// (3-3)\r\n//  위에서 shoes[0] 이라는 데이터를 shoes라는 이름으로 props로 전송했기 때문에\r\n// props.shoes[0].title 이게 아니라\r\n// props.shoes.title 이렇게 써주시면 제목 등이 정상적으로 출력됩니다.\r\n\r\n// 교훈은:\r\n//  같은 컴포넌트라고 항상 같은 내용만 보여줄 수 있는게 아닙니다.\r\n//  props 등을 이용해 각각 다른 내용을 전송해주면 됩니다.\r\n//  그럼 같은 컴포넌트라고 해도 각각 다른 내용이 출력되는 컴포넌트를 만드실 수 있습니다.\r\n\r\n// (4)  <Card> 3개를 map 반복문으로 돌려보았습니다.\r\n// (4-2) 자료.map( ()=>{ return( 반복시킬HTML    }  )\r\n// (shoes라는 state 갯수만큼 돌려야하니까 shoes에 map을 붙였습니다)\r\n// map 반복문 안엔 2개의 파라미터가 들어갈 수 있는데 (a, i 이렇게 써놓은거요)\r\n// a는 shoes라는 array에 있던 하나하나의 데이터를 의미하고,\r\n// i는 반복문 돌면서 1씩 증가하는 정수입니다. 0,1,2 … 이런 식으로 변하는 변수겠네요.\r\n\r\n// (4-3) 둘 다 맞는 코딩\r\n\r\n// (5) src=\"\"에 데이터바인딩하기\r\n\r\n//(5-2) src = { } ...변수명,함수명을 넣을 수 있음\r\n\r\n//(5-3) props 전송하시려면\r\n// 1. i={i} 이렇게 전송해주시고 \r\n// 2. props.i 이렇게 갖다쓴다고 배워봤습니다.\r\n\r\n// (5-4)\r\n// 근데 i는 0,1,2가 된댔는데 우리가 필요한 숫자는 1,2,3 이잖아요\r\n// 그래서 (props.i + 1) 이런 변수를 집어넣은 것입니다.\r\n\r\nfunction App18() {\r\n\r\n  let [shoes,shoes변경]=useState(data4naming);\r\n\r\n  return (\r\n   <div className=\"App\">\r\n    <div className=\"black-nav\">  🦄18 숙제 해설 : 상품목록 Component 만들기 + 반복문  </div>  \r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n      // (2) (2-3) (2-4)\r\n      <Card shoes={shoes}></Card>  \r\n        <div className=\"col-md-4\">\r\n          <img src=\"https://codingapple1.github.io/shop/shoes2.jpg\" width=\"100%\" />\r\n          <h4> {shoes[1].title} </h4> \r\n          <p>{shoes[1].content} & {shoes[1].price}  </p>          \r\n        </div>\r\n        <div className=\"col-md-4\">\r\n          <img src=\"https://codingapple1.github.io/shop/shoes3.jpg\" width=\"100%\" />\r\n          <h4> {shoes[2].title} </h4> \r\n          <p>{shoes[2].content} & {shoes[2].price}  </p>          \r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n// (3)\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n      // (3-2)\r\n      <Card2 shoes={shoes[0]}></Card2>\r\n      <Card2 shoes={shoes[1]}></Card2>\r\n      <Card2 shoes={shoes[2]}></Card2>    \r\n      </div>\r\n    </div>\r\n\r\n    // (4)\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n      // (4-2)\r\n      {\r\n        shoes.map( (a,i)=>{\r\n          // (4-3) i  //(5-3) \r\n          return       <Card2 shoes={shoes[i]} i={i}></Card2>\r\n          // (4-3) a\r\n          // return       <Card2 shoes={a}></Card2>\r\n        }  )\r\n      }\r\n      </div>\r\n    </div>\r\n   </div>\r\n    );\r\n }\r\n\r\n//  (2-2) (2-4)\r\n function Card(props){\r\n   return(\r\n    <div className=\"col-md-4\">\r\n    <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\r\n    // (2-4)\r\n    <h4> {props.shoes[0].title} </h4> \r\n    <p>{props.shoes[0].content} & {props.shoes[0].price}  </p>    \r\n  </div>\r\n   )\r\n }\r\n\r\n  // (3)\r\n function Card2(props){\r\n   return(\r\n    <div className=\"col-md-4\">\r\n    // (5) (5-2) (5-3)\r\n    <img src={\"https://codingapple1.github.io/shop/shoes\"+(props.i+1)+\".jpg\"} width=\"100%\" />\r\n    // (3-3)\r\n    <h4> {props.shoes.title} </h4> \r\n    <p>{props.shoes.content} & {props.shoes.price}  </p>    \r\n  </div>\r\n   )\r\n }\r\n\r\n// 🦄19 React Router 1 : 셋팅과 기본 라우팅 (router = 페이지 만들고, a태그)\r\n// (router 라우터 ((데이터 전송시의 최적 경로를 선택하는 장치)) ) (route 루트. 길)\r\n// React-Router 특징 : 각각 페이지마다 다른 HTML 파일을 보여주는게 아닙니다.\r\n// HTML 내부의 내용을 갈아치워서 다른 페이지처럼 흉내내는 것일 뿐입니다.\r\n\r\n// react-router-dom이라는 공식 라이브러리를 설치해서 이용하시면 됩니다.\r\n//설치: 터미널을 여시고 npm install react-router-dom\r\n\r\n// (2) index.js 파일에 방문합니다.\r\n\r\n// (3) 상단에 Route 라는 태그를 import 해오십시오.  \r\n// Link, Switch는 다음시간에 쓸거라 미리 해놨습니다.\r\n// import { Link, Route, Switch } from 'react-router-dom';\r\n\r\n// (4)라우팅하려면 \r\n// (4-2). 원하는 곳에 <Route></Route>  , <Route/>태그를 작성합니다.\r\n// (4-3). <Route>안에 path와 path 방문시 보여줄 HTML 을 적으시면 됩니다. \r\n// 계속 추가 끝없이 가능\r\n\r\n// (4-4) component 호출 2way\r\n\r\n// (5) Q: 나는 /detail로 접속했는데 왜 상세페이지, 메인페이지 둘다 보여주죠? \r\n// 왜냐면 /detail이라고 적으면 /라는 경로도 포함되어있으니까요.\r\n// 그래서 / 경로로 접속했다고 생각하고 메인페이지\r\n// /detail 경로도 접속했다고 생각하고 상세페이지 둘다 보여주는 것입니다.\r\n\r\n// a: 그런게 싫으시면 / 경로에 exact라는 속성을 부여해주시면 됩니다.\r\n\r\n// (6) /main2 , /deteail2 경로에 <Jumbotron> html 추가\r\n//  /deteail2 경로에 상세페이지 html 추가\r\n\r\nfunction App19() {\r\n  return (\r\n   <div className=\"App\">\r\n    <div className=\"black-nav\">🦄19 React Router 1 : 셋팅과 기본 라우팅 </div>\r\n  \r\n    // (4-2) (4-3)\r\n    <Route path=\"/\">메인페이지⭐</Route>\r\n    <Route path=\"/detail\">상세페이지😎 </Route>\r\n    <Route pate=\"/4-2\"/>4-2\r\n    <Route path=\"/ㄴㄻㄴㄹㅇ\">계속 추가 끝없이 가능</Route>\r\n\r\n    // (4-4)\r\n    <Route path=\"/component\" component={Card3}></Route>\r\n    <Route path=\"/component2\" > <Card3/> </Route>\r\n\r\n    // (5)\r\n    <Route exact path=\"/\">메인페이지⭐</Route>\r\n\r\n    // (6)\r\n    <Route path=\"/main2\">     \r\n      <Jumbotron>\r\n      <h1>Hello, world!</h1>\r\n      <p>\r\n        This is a simple hero unit, a simple jumbotron-style component for calling\r\n        extra attention to featured content or information.\r\n      </p>\r\n      <p>\r\n        <Button variant=\"primary\">Learn more</Button>\r\n      </p>\r\n     </Jumbotron>\r\n    </Route>\r\n\r\n    <Route path=\"/detail2\">\r\n        <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\r\n          </div>\r\n          <div className=\"col-md-6 mt-4\">\r\n            <h4 className=\"pt-5\">상품명</h4>\r\n            <p>상품설명</p>\r\n            <p>120000원</p>\r\n            <button className=\"btn btn-danger\">주문하기</button> \r\n          </div>\r\n        </div>\r\n          </div> \r\n      </Route>\r\n    \r\n   </div>\r\n  );\r\n}\r\n\r\n// (4-4)\r\nfunction Card3(){\r\n  return(\r\n  <div>Component 🙄</div>\r\n  )\r\n}\r\n\r\n// 🦄20 React Router 2 : Link, Switch, history 기능\r\n// (1)Component Detail20에 넣음\r\n\r\n// (2)  -->Detail20.js (src 폴더 내에 Detail20.js )\r\n\r\n// (2-3) 호출\r\n// (2-4) src폴더내에 component파일만 모아놓은 폴더를 만들기도 함\r\n\r\n//(3) Link 태그로 페이지 이동버튼 만들기 \r\n// 메인페이지, 상세페이지 이동버튼을 만들어봅시다.\r\n\r\n// (3-2) 일단 (href=\"#home\" 삭제)(link사용할 예정)\r\n\r\n//(3-3) ‘react-router-dom’ library 에서 가져온 Link 쓸수 있음.\r\n// 일종의 component.\r\n// html 태그처럼 사용\r\n\r\n//(3-4) 페이지 이동버튼으로 바꾸길 원하는 글자들에 <Link> 태그를 감싸보시길 바랍니다.\r\n// 첫글자 대문자\r\n// 그 다음에 to 라는 속성을 이용해서 경로를 적어주시면 페이지 이동버튼이 완성됩니다.\r\n\r\n// Link 태그를 사용하고 to 속성을 이용해 경로만 지정해주면 됩니다.\r\n// 어찌보면 <a> 태그 만드는 것과 매우 유사합니다.\r\n \r\n// 그럼 Detail이라는 글자를 누르면 /detail 경로, Home이라는 글자를 누르면 / 경로로 이동합니다.\r\n\r\n\r\n//(3-5) 24강에 나오는 내용 : <Nav.Link> 안에 <Link> 쓰면 브라우저 콘솔창에 warning이 뜹니다\r\n// 저번 Router 했을 때부터 뜨는, \r\n// 콘솔창에 “a태그 안에 a태그 넣으면 안될 것 같은디요” 라고 워닝을 해결해봅시다.\r\n\r\n// as라는 것은 react-bootstrap 문법인데 \r\n// 그냥 기본 a태그 대신 사용할 HTML태그 혹은 컴포넌트를 집어넣을 수 있습니다.\r\n// 그래서 Link 태그를 집어넣은 것일 뿐입니다\r\n// as={Link} :  as={Link} 속해있는 태그는 link태그처럼 써달라는 의미\r\n\r\n// (4) (5) (6) (7) -->Detail20.js\r\n\r\n\r\n// (8) Switch 컴포넌트에 대해 알아보자\r\n// 새로운 Route는 path를 /:id 라고 적었는데, 이게 뭐냐면 URL 파라미터라는 문법인데\r\n// 그냥 / 슬래시 뒤에 모든 문자가 오면 이 Route로 안내해주세요~를 뜻합니다. (다음 시간에 배울 예정)\r\n// 암튼 아무 문자나 넣어도 이 경로로 이동을 시켜주라고 코드를 짜놓았습니다.\r\n\r\n// Q. 그럼 /detail로 이동하면 어떤게 보이죠?\r\n// A. (1) <Detail> (2) <div>새로 만든 route입니다</div> 이거 둘다 보여줍니다.\r\n// (왜냐면 리액트 라우터는 그냥 URL 매치되는 것들 전부 다 보여준다니깐요)\r\n\r\n// 이런걸 방지하고 싶다, 그냥 한번에 하나의 <Route>만 보여주고 싶다 그러면\r\n// <Route>들을 위에서 import 해온 <Switch> 태그로 감싸면 됩니다.\r\n\r\n// (8-2)\r\n//1. import { Switch } from 'react-router-dom' 추가\r\n//2. <Switch> 태그로  전부 감쌈\r\n//  다 감싸면 이제 여러개의 Route가 매칭이 되어도 맨 위의 Route 하나만 보여줍니다.\r\n// 이걸 응용하시면 이전시간에 겪었던 / 경로 문제도 exact 쓰지않고 해결할 수 있습니다.\r\n// 일반적으로 switch로 감싸고 사용함 (exact사용할 필요 없어짐)\r\n\r\n\r\nfunction App20() {\r\n  return (\r\n   <div className=\"App\">\r\n    <div className=\"black-nav\">🦄20 React Router 2 : Link, Switch, history 기능 </div>\r\n\r\n    <Navbar bg=\"light\" expand=\"lg\" className='background'>\r\n      <Navbar.Brand href=\"#home\">..</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n        // (3-2) (3-4)\r\n          <Nav.Link> <Link to='/'>Home</Link></Nav.Link>\r\n          <Nav.Link><Link to='/detail'>Detail</Link> </Nav.Link>\r\n\r\n          // (3-5)\r\n          <Nav.Link as={Link} to=\"/\"> Home </Nav.Link> \r\n          <Nav.Link as={Link} to=\"/detail\"> Detail </Nav.Link> \r\n\r\n          <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n            <NavDropdown.Divider />\r\n            <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n          </NavDropdown>\r\n        </Nav>        \r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n    \r\n    <Route path=\"/\">     \r\n      <Jumbotron>\r\n      <h1>Hello, world!</h1>\r\n      <p>\r\n        This is a simple hero unit, a simple jumbotron-style component for calling\r\n        extra attention to featured content or information.\r\n      </p>\r\n      <p>\r\n        <Button variant=\"primary\">Learn more</Button>\r\n      </p>\r\n     </Jumbotron>\r\n    </Route>\r\n \r\n      // (1)\r\n      <Route path=\"/detail\">\r\n        <Detail20></Detail20>\r\n      </Route>\r\n\r\n        // (2-3)\r\n      <Route path=\"/detail\">\r\n        <Detail20_file></Detail20_file>     \r\n      </Route>     \r\n\r\n      // (8-2)\r\n    <Switch>    \r\n      <Route path=\"/detail\">\r\n        <Detail20></Detail20>\r\n      </Route>\r\n   \r\n      <Route path=\"/detail\">\r\n        <Detail20_file></Detail20_file>     \r\n      </Route>\r\n\r\n      //  (8)\r\n      <Route path=\"/:id\">\r\n      <div>아무거나 적었을때 이거 보여주세요.</div>\r\n      </Route>\r\n    </Switch>\r\n\r\n   </div>\r\n  );\r\n}\r\n// (1)\r\nfunction Detail20(){\r\n  return(\r\n\r\n    <div className=\"container\">\r\n    <div className=\"row\">\r\n      <div className=\"col-md-6\">\r\n        <img src=\"https://codingapple1.github.io/shop/shoes1.jpg\" width=\"100%\" />\r\n      </div>\r\n      <div className=\"col-md-6 mt-4\">\r\n        <h4 className=\"pt-5\">Component상품명</h4>\r\n        <p>상품설명</p>\r\n        <p>120000원</p>\r\n        <button className=\"btn btn-danger\">주문하기</button> \r\n      </div>\r\n    </div>\r\n  </div> \r\n\r\n  )\r\n}\r\n\r\n//🦄21 React Router 3 : URL 파라미터로 상세페이지 100개 만들기\r\n\r\n// URL 파라미터에 대해 알아봅시다.\r\n// 상세페이지 5조 5억개 정도는 한번에 만들어낼 수 있습니다.\r\n// 그래서 우리도 상품 3개에 해당하는 각각의 상세페이지를 만들어주도록 합시다.\r\n\r\n// (1)Data21파일 , \r\n// (1-2)state, \r\n// (1-3)데이터바인딩 , \r\n// (1-4)Component props\r\n\r\n//(1-5) state 만들 땐 state를 필요로하는 컴포넌트들 중 가장 최상위 컴포넌트에 보관하시길 바랍니다.\r\n// 다른 컴포넌트에서 안쓰는 데이터는 그냥 아무 컴포넌트에 만드셔도 되는데\r\n// 다양한 곳에서 쓸 것 같은 중요한 데이터는 항상 상위 컴포넌트, 혹은 귀찮으면 그냥 최상위 컴포넌트인 App 컴포넌트에 보관하도록 합시다.\r\n// 그냥 모든 중요한 데이터는 App Component or Redux 파일에 보관...\r\n\r\n\r\n// (2) 이런 식으로 3개의 페이지를 만들었습니다. 완성!\r\n// 하지만 이거 너무 반복적이죠 반복문을 돌리고 싶은 충동도 생기고요.\r\n// 근데 URL 만드실 땐 반복문은 안쓰고 보통 URL 파라미터 문법을 이용해 축약을 시켜줍니다.\r\n\r\n// (3) url 파라미터  (url parameters) \":\"\r\n\r\n// :뒤에 아무이름 가능. 선생님은 id라고 작명한거임  \r\n// 저번시간에 잠깐 했던 : 이거 콜론기호를 쓰시면 되는데, 이게 뭔뜻이냐면, :id 자리에 아무 문자나 입력하면 <Detail> 컴포넌트를 보여주세요~ 입니다.\r\n\r\n// 그럼 여러분 이제 /detail/1234 아무거나 입력해도 <Detail> 컴포넌트를 보여줍니다.\r\n//  id라는 부분은 함수 파라미터처럼 자유롭게 작명해주시면 됩니다.\r\n//  파라미터는 2개 3개 몇개든 추가할 수 있습니다. /detail/:id/:name 이런 식도 가능합니다.\r\n// 그럼 /detail/0 혹은 /detail/1 이렇게 접속하면 이제 상세페이지가 잘 뜨죠\r\n// 근데 항상 같은 상품명이 뜨는게 문제입니다. 이걸 해결해봅시다.\r\n\r\n// (4) (5)  --> Detail21_file.js\r\n\r\n// (6) ---> Detail21_2file.js /  find() 라는 ES6 신문법\r\n\r\nfunction App21() {\r\n\r\n// (1-2)\r\n  let [shoes,shoes변경] = useState(Data21);\r\n\r\n  return (\r\n   <div className=\"App\">\r\n    <div className=\"black-nav\">🦄21 React Router 3 : URL 파라미터로 상세페이지 100개 만들기</div>\r\n\r\n    <Navbar bg=\"light\" expand=\"lg\" className='background'>\r\n      <Navbar.Brand href=\"#home\">..</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n            <Nav.Link> <Link to='/'>Home</Link></Nav.Link>\r\n          <Nav.Link><Link to='/detail'>Detail</Link> </Nav.Link>\r\n\r\n          <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n            <NavDropdown.Divider />\r\n            <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n          </NavDropdown>\r\n        </Nav>        \r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n    \r\n    <Route path=\"/\">     \r\n      <Jumbotron>\r\n      <h1>Hello, world!</h1>\r\n      <p>\r\n        This is a simple hero unit, a simple jumbotron-style component for calling\r\n        extra attention to featured content or information.\r\n      </p>\r\n      <p>\r\n        <Button variant=\"primary\">Learn more</Button>\r\n      </p>\r\n     </Jumbotron>\r\n    </Route>\r\n      <switch>\r\n\r\n      <Route path=\"/detail\">\r\n      // (1-3)\r\n      <Detail21_file shoes={shoes}/>   \r\n    </Route>\r\n\r\n    // (2)\r\n    <Route path=\"/detail/0\">\r\n      <Detail21_file shoes={shoes}/>   \r\n    </Route>\r\n    <Route path=\"/detail/1\">\r\n     <Detail21_file shoes={shoes}/>   \r\n    </Route>\r\n    <Route path=\"/detail/2\">\r\n     <Detail21_file shoes={shoes}/>   \r\n    </Route>\r\n\r\n    // (3) (4) (5)\r\n    <Route path=\"/detail/:id\">\r\n     <Detail21_file shoes={shoes}/>   \r\n    </Route>\r\n\r\n    // (6)\r\n    <Route path=\"/detail/:id\">\r\n      <Detail21_2file shoes={shoes}/>   \r\n    </Route>\r\n\r\n    </switch>\r\n\r\n\r\n   </div>\r\n  );\r\n}\r\n\r\n// 🦄22 styled-components를 이용한 class없는 CSS스타일링\r\n// ---> Detail22_file\r\n\r\nfunction App22() {\r\n\r\n// 🌈(1-2)\r\n  let [shoes,shoes변경] = useState(Data21);\r\n\r\n  return (\r\n   <div className=\"App\">\r\n    <div className=\"black-nav\">🦄22 styled-components를 이용한 class없는 CSS스타일링</div>\r\n\r\n    <Navbar bg=\"light\" expand=\"lg\" className='background'>\r\n      <Navbar.Brand href=\"#home\">..</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n            <Nav.Link> <Link to='/'>Home</Link></Nav.Link>\r\n          <Nav.Link><Link to='/detail'>Detail</Link> </Nav.Link>\r\n   \r\n        </Nav>        \r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n    \r\n    <Route path=\"/\">     \r\n    </Route>\r\n\r\n      <switch>\r\n      →  Detail22_file.js\r\n      <Route path=\"/detail\">\r\n      <Detail22_file />   \r\n    </Route>\r\n \r\n    </switch>\r\n\r\n\r\n   </div>\r\n  );\r\n}\r\n\r\n//🦄 23 SASS를 쓰자 (SASS 문법 10분 총정리)\r\n// SASS 문법으로 작성한 뒤에  --> CSS로 컴파일\r\n// node-sass라는 라이브러리만 설치하시면 CSS로 컴파일 알아서 해줌\r\n// 설치: 터미널 에서 npm install node-sass  / yarn add node-sass\r\n\r\n//   → Detail23_file.js\r\n // → Detail23.Sass\r\n\r\n\r\nfunction App23() {\r\n\r\n    let [shoes,shoes변경] = useState(Data21);\r\n  \r\n    return (\r\n     <div className=\"App\">\r\n      <div className=\"black-nav\">🦄23 SASS를 쓰자 (SASS 문법 10분 총정리)</div>\r\n  \r\n      <Navbar bg=\"light\" expand=\"lg\" className='background'>\r\n        <Navbar.Brand href=\"#home\">..</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n              <Nav.Link> <Link to='/'>Home</Link></Nav.Link>\r\n            <Nav.Link><Link to='/detail'>Detail</Link> </Nav.Link>     \r\n          </Nav>        \r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n      \r\n      <Route path=\"/\">     </Route>\r\n  \r\n        <switch>\r\n  → Detail23_file.js\r\n  → Detail23.Scss  \r\n        <Route path=\"/detail\">\r\n        <Detail23_file />   \r\n      </Route>\r\n   \r\n      </switch>  \r\n      \r\n     </div>\r\n    );\r\n  }\r\n\r\n  // 🦄24 Lifecycle Hook (옛날사람) useEffect (요즘사람)\r\n  //  →🦄 Detail24_file.js  \r\n\r\nfunction App24() {\r\n\r\n    let [shoes,shoes변경] = useState(Data21);\r\n  \r\n    return (\r\n     <div className=\"App\">\r\n      <div className=\"black-nav\">🦄24 Lifecycle Hook (옛날사람) useEffect (요즘사람)</div>\r\n  \r\n      <Navbar bg=\"light\" expand=\"lg\" className='background'>\r\n        <Navbar.Brand href=\"#home\">..</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n              <Nav.Link> <Link to='/'>Home</Link></Nav.Link>\r\n            <Nav.Link><Link to='/detail'>Detail</Link> </Nav.Link>\r\n     \r\n          </Nav>        \r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n      \r\n      <Route path=\"/\">  </Route>\r\n  \r\n       <switch>\r\n          →🦄 Detail24_file.js  \r\n          <Route path=\"/detail\">\r\n          <Detail24_file />   \r\n        </Route>   \r\n      </switch>  \r\n      \r\n     </div>\r\n    );\r\n  }\r\n\r\n  // 🦄25 useEffect 숙제 풀이 & 나머지 기능\r\n  //  →🦄 Detail25_file.js  \r\n\r\nfunction App25() {\r\n\r\n    let [shoes,shoes변경] = useState(Data21);\r\n  \r\n    return (\r\n     <div className=\"App\">\r\n      <div className=\"black-nav\">🦄25 useEffect 숙제 풀이 & 나머지 기능</div>\r\n  \r\n      <Navbar bg=\"light\" expand=\"lg\" className='background'>\r\n        <Navbar.Brand href=\"#home\">..</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n              <Nav.Link> <Link to='/'>Home</Link></Nav.Link>\r\n            <Nav.Link><Link to='/detail'>Detail</Link> </Nav.Link>     \r\n          </Nav>        \r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n      \r\n      <Route path=\"/\"></Route>\r\n  \r\n        <switch>\r\n          →🦄 Detail25_file.js  \r\n          <Route path=\"/detail\">\r\n          <Detail25_file />   \r\n        </Route>   \r\n      </switch>  \r\n      \r\n     </div>\r\n    );\r\n  }\r\n  // 🦄26 리액트에서의 Ajax 요청방법 & Ajax는 무엇인가\r\n\r\n// ● Ajax는 서버에 새로고침없이 요청을 할 수 있게 도와주는 일종의 자바스크립트 코드\r\n// 서버는 누군가 요청을 하면 데이터를 갖다주는 프로그램일 뿐\r\n \r\n// GET, POST 이런 요청방법이 있습니다.\r\n// GET : 데이터, 웹페이지 같은걸 읽고싶을 때 하는 요청  : 웹브라우저 검색\r\n// POST : 데이터를 서버로 보내고 싶을 때 하는 요청 : 로그인\r\n\r\n// ●Ajax는 \r\n// 1. jQuery Ajax를 쓰든가,\r\n// 2. axios 설치해서 쓰든가, \r\n// 3. 쌩자바스크립트 fetch()를 쓰든가 하시면 됩니다.\r\n// 근데 리액트 개발환경에선 axios 혹은 fetch()를 많이 사용합니다.\r\n// 우린 더 호환성이 좋고 참고할 문서도 많은 axios를 설치해서 이용합시다.\r\n\r\n// (2) 터미널에 npm install axios  / or / yarn add axios\r\n// 상단에 import 해오시면 axios로 ajax 요청할 준비는 끝입니다.\r\n// import axios from 'axios';\r\n\r\n\r\n// (3) button, onClick 준비\r\n\r\n// (4) axios.get() 이라고 작성하면 GET요청을 새로고침 없이도 몰래 할 수 있습니다.\r\n// GET요청을 할 목적지 (URL)은 괄호안에 문자형태로 적어주시면 됩니다.\r\n// https://codingapple1.github.io/shop/data2.json\r\n// GET 요청 끝! 그럼 이제 버튼을 누를 때마다 데이터를 몰래 가져오네요.\r\n// 진짜 상품데이터가 오는지 확인하고 싶으면 이걸 그대로 브라우저 주소창에서 GET 요청 해보시면 됩니다.\r\n// 브라우저 주소창에 이 URL을 복붙하면 자료 3개가 나오죠?\r\n\r\n// (5) 가져온 데이터를 출력하고 싶으면 하단처럼 작성합니다.\r\n//  .then(()=>{ 요청성공시실행할코드 })\r\n//  .catch(()=>{ 요청실패시실행할코드 })\r\n \r\n//   .get() 함수 바로 뒤에 쩜찍어서 저렇게 두개의 함수를 붙일 수 있습니다. \r\n//  각각 요청성공/실패시 실행할 코드를 담을 수 있습니다. \r\n//  더보기를 눌렀을 때 성공/실패메세지를 띄우고 싶다면 다 저런 함수안에 담으시면 됩니다.\r\n\r\n// (5-2) 서버 없는 주소 때..console.log('실패했음');\r\n\r\n// (6) 요청 성공시 데이터를 출력해보고 싶으면 하단과 같이 작성합니다.\r\n// then 안의 콜백함수 안에 파라미터를 추가하면 그게 받아온 데이터입니다.\r\n// result ('result' x) : 받아온 모든 코드 출력 \r\n\r\n// (6-2)\r\n// result ('result' x) : 실제로 받아온 데이터만 출력 \r\n\r\n//  (7) vanilla JS 문법. fetch()\r\n// fetch(요청할URL).then() 이렇게 거의 똑같이 사용가능합니다.\r\n// 하지만 가져온 자료가 JSON이라면 object로 자동 변환이 안됩니다.\r\n\r\n// (참고)  JSON \r\n// 우리가 요청한 데이터는 array/object 자료가 아닌 JSON이라는 자료형입니다.\r\n// 따옴표가 다 쳐있죠? 왜냐면 서버와 통신할 때는 텍스트만 전송할 수 있습니다.\r\n// 그래서 텍스트럼 보이게 하기 위해서 Object에 따옴표를 다 친겁니다.\r\n// 그걸 전문용어로 JSON이라고 합니다.\r\n\r\n// JSON은 Object 자료형처럼 어쩌구.title 이런 식으로 정보를 뽑지 못해서, JSON자료는 Object로 변환을 해주어야합니다.\r\n\r\n// axios라이브러리 쓰시면 JSON 자료를 가져와도 지가 알아서 따옴표를 제거한 Object로 자동으로 변환해줌 (편함)\r\n//  fetch()는 그런거 안해줍니다. undefined 뜸\r\n\r\n\r\nfunction App26() {\r\n\r\n    let [shoes,shoes변경] = useState(Data21);\r\n  \r\n    return (\r\n     <div className=\"App\">\r\n      <div className=\"black-nav\">🦄26 리액트에서의 Ajax 요청방법 & Ajax는 무엇인가</div>\r\n  \r\n      <Navbar bg=\"light\" expand=\"lg\" className='background'>\r\n        <Navbar.Brand href=\"#home\">..</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n              <Nav.Link> <Link to='/'>Home</Link></Nav.Link>\r\n            <Nav.Link><Link to='/detail'>Detail</Link> </Nav.Link>     \r\n          </Nav>        \r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n      \r\n      <Route path=\"/\"></Route>\r\n  \r\n        <switch>\r\n          <Route path=\"/detail\">\r\n          <Detail25_file />   \r\n        </Route>   \r\n      </switch>  \r\n      \r\n      // (3)\r\n      <button className=\"btn btn-primary\" onClick={()=>{  }}>더보기</button>\r\n\r\n      // (4) console확인👉👉\r\n      <button className=\"btn btn-primary\" onClick={()=>{\r\n        axios.get('https://codingapple1.github.io/shop/data2.json')\r\n         // (5)\r\n        .then(()=>{\r\n          console.log('성공했음');\r\n        })\r\n        .catch(()=>{\r\n          console.log('실패했음');\r\n        })  \r\n        }}>더보기</button>\r\n\r\n      // (5-2)\r\n      <button className=\"btn btn-primary\" onClick={()=>{\r\n        axios.get('https://codingapple1.github.io/shop/data2222222222222.json')        \r\n        .catch(()=>{\r\n          console.log('실패했음');\r\n        })  \r\n        }}>더보기</button>\r\n       \r\n      <button className=\"btn btn-primary\" onClick={()=>{\r\n        axios.get('https://codingapple1.github.io/shop/data2.json')\r\n         // (6)\r\n         .then((result)=>{\r\n          console.log(result);\r\n        })\r\n        }}>더보기</button>\r\n     \r\n      <button className=\"btn btn-primary\" onClick={()=>{\r\n        axios.get('https://codingapple1.github.io/shop/data2.json')\r\n         .then((result)=>{\r\n              // (6-2)\r\n          console.log(result.data);\r\n        })\r\n        }}>더보기</button>\r\n        \r\n        // (7)\r\n        <button className=\"btn btn-primary\" onClick={()=>{\r\n          fetch('https://codingapple1.github.io/shop/data2.json')\r\n           .then((result)=>{              \r\n            console.log(result.data);\r\n          })\r\n          }}>더보기</button>\r\n\r\n     </div>\r\n    );\r\n  }\r\n\r\n//🦄 27 리액트에서의 Ajax 요청방법 2 & 숙제풀이\r\n// 숙제해설 : 더보기 버튼을 클릭하면, 상품레이아웃 3개 추가하기 \r\n\r\n// (1)\r\n// 저번 시간에 상품 데이터 3개를 요청하는건 완료했습니다. \r\n// 이제 그 데이터로 레이아웃을 만들어봅시다.\r\n// 상품레이아웃은 <Card> 컴포넌트 + map 반복문으로 만들었습니다.\r\n//  shoes라는 state 갯수 만큼 <Card> 레이아웃을 생성해주세요~ 라고 코드를 짰었습니다.\r\n\r\n// HTML 생성은 생각할 필요 없습니다.\r\n// “shoes 라는 state에 데이터 몇개를 추가해주세요~” 데이터 조작\r\n// 그럼 state에 데이터 3개가 추가되면 <Card> 레이아웃은 알아서 6개가 될테니까요.\r\n// 리액트 환경에서 여러분이 할 일은 그냥 데이터 조작입니다. 그럼 HTML은 알아서 바뀜 ㅅㄱ\r\n\r\n// (2)\r\n// 그래서 더보기 버튼을 클릭하면\r\n// 1. ajax 요청으로 데이터 3개를 가져오고\r\n// 2. ajax 성공하면 shoes라는 state에 추가하도록 합시다.\r\n\r\n//  then 함수 안에서 ajax가 성공했을 때의 코드를 작성하실 수 있습니다.\r\n// 거기서 shoes변경() 함수로 shoes라는 state에 데이터를 추가했습니다.\r\n\r\n// ...연산자는 괄호를 벗겨줌\r\n\r\n// (3)\r\n// 이번엔 state 데이터를 변경하기 위해 사본을 하나 생성하는게 아니라, 약간 한번에 처리를 해봅니다.\r\n\r\n// […shoes, …result.data ]\r\n// 1. shoes라는 기존 state 데이터를 괄호 벗겨서 여기 넣어주시고,\r\n// 2. result.data라는 ajax 성공시 받아오는 데이터도 괄호 벗겨서 여기 넣어주세요\r\n// 3. 그리고 이걸 전부 [ ] 대괄호로 감싸서 array를 만들어주세요\r\n\r\n// 이러면 기존 state 사본생성 없이도 원하는 데이터를 쉽게 추가 가능\r\n\r\n// (지금 Array 데이터를 다루고 있지만 Object 데이터들도 마찬가지로 … 괄호벗기기 연산자 사용가능합니다)\r\n\r\n// (3-2)\r\n// shoes 에 .... 붙이면 데이터만 남아서 [ { }, { }, { } ]\r\n// result.data  에 .... 붙이면 데이터만 남아서 [ { }, { }, { } ]\r\n\r\n//  shoes변경 [ { }, { }, { } , { }, { }, { } ] 이렇게 데이터가 남음\r\n\r\n// (3-3)\r\n// 버튼 클릭하면, 데이터 가져와서, 추가된버전으로  shoes state 변경시킴\r\n// […shoes ] → shoes변경 → […shoes, …result.data ]\r\n\r\n// (3-4)\r\n// Q. 버튼을 2번재 클릭할때, 새로운 url로 데이터 요청하고 싶다면?\r\n// A. 버튼 누른 횟수를 변수나 state에 저장 후 \r\n// 버튼을 1회 누르면 data2.json, \r\n// 2회누르면 data3.json 이 경로로 요청하도록 코드를 바꿔주시면 되겠네요.\r\n\r\n// Q. 더보기로 보여줄 상품이 3개 밖에 없습니다. 근데 사용자가 버튼을 또 클릭하면 어쩌죠\r\n// A. 보여줄 상품의 마지막에 도달했을 시 버튼을 숨기거나 하시면 됩니다.\r\n\r\n// Q. 실패했을 경우 어쩌죠 \r\n// A. catch() 함수 안에 실행 원하는 코드를 담으시면 됩니다. “요청실패시 사용자에게 알림창 UI를 보여줍니다~” 이런 코드도 괜찮겠네요.\r\n\r\n// (4) → 캡쳐정리 확인\r\n// Q: 버튼 클릭때 ' 로딩중 ' 띄우기 \r\n// A: 클릭한때  '로딩중html' 띄우게함\r\n// axios서버 받거나,실패시 '로딩중html' 안보이게 함\r\n// 이전시간에 배운 리액트 html미리 만든 후,  if문 활용하기 문법 \r\n\r\n// (5) post : 서버에 데이터 보내기\r\n// axios.post('url',(보낼 데이터));\r\n\r\n// (6) → Detail27_file.js\r\n\r\nfunction App27() {\r\n\r\n  let [shoes,shoes변경] = useState(Data21);\r\n\r\n  return (\r\n   <div className=\"App\">\r\n    <div className=\"black-nav\">🦄27 리액트에서의 Ajax 요청방법 2 & 숙제풀이</div>\r\n\r\n    <Navbar bg=\"light\" expand=\"lg\" className='background'>\r\n      <Navbar.Brand href=\"#home\">..</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n            <Nav.Link> <Link to='/'>Home</Link></Nav.Link>\r\n          <Nav.Link><Link to='/detail'>Detail</Link> </Nav.Link>     \r\n        </Nav>        \r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n\r\n    <switch>\r\n     <Route path=\"/\"></Route>\r\n      <Route path=\"/detail\">\r\n        <Detail27_file />   \r\n      </Route>   \r\n    </switch>  \r\n    \r\n    // (1)\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n      {\r\n        shoes.map( (a,i)=>{\r\n          return <Card2 shoes={shoes[i]} i={i}></Card2> \r\n        }  )\r\n      }\r\n      </div>\r\n    </div>\r\n\r\n    <button className=\"btn btn-primary\" onClick={()=>{\r\n      // (3-4)\r\n      axios.get('https://codingapple1.github.io/shop/data2.json')\r\n       .then((result)=>{\r\n           console.log(result.data);\r\n          //  (2) (3) (3-2) (3-3)\r\n           shoes변경([...shoes,...result.data]);\r\n      })\r\n      .catch(()=>{\r\n        console.log('실패했음');\r\n      })  \r\n\r\n      // (5)\r\n      // axios.post('url',( id : 'codingapple', pw: 1234));\r\n      // .then( (result)=>{}  )\r\n      // .catch( ()=>{}  )\r\n      }}>더보기</button>\r\n      \r\n     \r\n\r\n   </div>\r\n  );\r\n}\r\n\r\n// 🦄28 Component를 3단계로 만들면 state 전달은 어떻게 하죠? props 두번 \r\n// <App> -> <Detail> -> <Info>\r\n// 이렇게 컴포넌트를 여러개 만들어놨는데 <App>에 있는 state 데이터를 <Info>가 쓰거나 변경하고 싶으면 어떻게 하냐는 소리입니다.\r\n\r\n// 결론부터 말하자면 App에서 Detail, 그리고 Detail에서 Info로 state를 전송하면 됩니다.\r\n// = 그냥 props문법 두번 쓰시면 됩니다.\r\n// 하위 컴포넌트들이 상위 컴포넌트의 state를 변경하고 싶을 때도 state변경함수를 props로 전달만 잘 해주시면 됩니다\r\n\r\n// (1)\r\n// <App>재고데이터 가져와서 <Info>에 표시하기\r\n// 재고데이터를 state에 저장해서 하나 만들어보도록 합시다.\r\n\r\n// (1-2)\r\n// 그냥 예제기 때문에 대충 [10,11,12] 이런 데이터를 저장하면 될듯요. (각각 상품 0,1,2의 재고데이터입니다)\r\n// let [재고, 재고변경] = useState([10,11,12]);\r\n\r\n// (1-3) (1-4) → Detail28_file\r\n\r\n// (1-5)\r\n// props로 재고라는 state 데이터를 2번 전송했습니다.\r\n// <App> -> <Detail> -> <Info> 이런 순서로요.\r\n// 그럼 이제 Info라는 컴포넌트 내에서도 재고라는 state를 사용가능합니다.\r\n\r\n// 하위 컴포넌트가 많으면 많아질 수록 props의 양이 증가합니다.\r\n// 지금 props로 보낼게 하나라 그렇지 수십개면 어떡합니까.\r\n// 그러니 컴포넌트 만들땐 각오하고 만드는게 좋습니다. (props hell)\r\n\r\n// (2) (2-2) → Detail28_file\r\n\r\n// (3) 오늘의 교훈 : 함수든 변수든 부모가 가진걸 자식컴포넌트가 사용하려면 항상 props로 전송해서 쓸 수 있습니다.\r\n// 이게 귀찮으면 컴포넌트를 많이 만들지 않으면 되겠습니다.\r\n// 혹은 나중에 배울 Context 문법 혹은 redux를 사용하면 됩니다.\r\n\r\nfunction App28() {\r\n\r\n  let [shoes,shoes변경] = useState(Data21);\r\n  \r\n  // (1-2)\r\n  let[재고state,재고state변경] = useState([10,11,12]);\r\n\r\n  return (\r\n   <div className=\"App\">\r\n    <div className=\"black-nav\">🦄28 Component를 3단계로 만들면 state 전달은 어떻게 하죠? props 두번 </div>\r\n\r\n    <Navbar bg=\"light\" expand=\"lg\" className='background'>\r\n      <Navbar.Brand href=\"#home\">..</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n            <Nav.Link> <Link to='/'>Home</Link></Nav.Link>\r\n          <Nav.Link><Link to='/detail'>Detail</Link> </Nav.Link>     \r\n        </Nav>        \r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n\r\n    <switch>\r\n     <Route path=\"/\"></Route>\r\n      <Route path=\"/detail\">\r\n      // (1-4) (2-2)\r\n        <Detail28_file shoes={shoes} 재고state={재고state} 재고state변경={재고state변경}/>   \r\n      </Route>   \r\n    </switch>  \r\n    \r\n   </div>\r\n  );\r\n}\r\n\r\nfunction App(){\r\n  return(\r\n    <div>\r\n       <App15/>      \r\n       <App16/>      \r\n       <App17/>      \r\n       <App18/>    \r\n       <App19/>    \r\n       <App20/>    \r\n       <App21/>    \r\n       <App22/>    \r\n       <App23/>    \r\n       <App24/>    \r\n       <App25/>    \r\n       <App26/>    \r\n       <App27/>    \r\n       <App28/>    \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// (2)\r\nvar mynaming = 'kim'\r\n\r\nexport default mynaming","\r\n// (3)\r\nvar naming = 'kim';\r\nvar naming2 = 'park';\r\n\r\nexport {naming, naming2}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// 19-(2-3) './'없이 넣은 경로이름 : 설치했던 react library... 불러옴(import)\n// 19-(2-4)  <BrowserRouter> vs <HashRouter> \n//  HashRouter를 복붙하시면 사이트 방문시 URL 맨 뒤에 /#/이 붙은채로 시작합니다.\n//  BrowserRouter를 복붙하시면 사이트 방문시 # 그런거 없이 깔끔해집니다.\n\n//  Q. URL이 #기호로 드러워지는 HashRouter를 왜쓰죠?\n//  A. 원래는 브라우저 주소창에 뭔가 페이지를 입력하면 서버에게 특정 페이지좀 보여달라는 요청이 됩니다. \n//  근데 우리는 요청할 서버가 없고 그냥 리액트가 라우팅을 담당하고 있습니다. \n//  그래서 잘못하면 있지도 않은 페에지를 서버에 요청을 해서 404 Page Not Found 이런 에러도 뜨고 그럴 수 있습니다. \n//  실수로 서버에게 요청하지 않게 하려면 안전하게 #을 붙여주어야합니다. \n//  왜냐면 브라우저 주소창에서 # 뒤에 붙은 것들은 절대 서버로 요청되지 않으니까요.\n\n\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  \n  // 19-(2-2) 이 파일은 App.js에 있는 <App> 컴포넌트를 index.html에 꽂아주세요~ 뭐 이런 작업을 시키는 파일이라고 보시면 됩니다.\n  // 19-(2-4)\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>      \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}